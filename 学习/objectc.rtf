{\rtf1\ansi\ansicpg936\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 ComicSansMS;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red100\green56\blue32;\red0\green116\blue0;
\red92\green38\blue153;\red28\green0\blue207;\red63\green110\blue116;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17760\viewh11840\viewkind0
\deftab334
\pard\tx334\pardeftab334\pardirnatural

\f0\fs28 \cf2 \CocoaLigature0 typedef\cf0  \cf2 struct\cf0  objc_class *Class;\
\cf2 typedef\cf0  \cf2 struct\cf0  objc_object \{\
    Class isa;\
\} *\cf2 id\cf0 ;\
\
\
\cf2 typedef\cf0  \cf2 struct\cf0  objc_selector 	*\cf2 SEL\cf0 ;    \
\cf2 typedef\cf0  \cf2 id\cf0  			(*\cf2 IMP\cf0 )(\cf2 id\cf0 , \cf2 SEL\cf0 , ...); \
\
\cf2 struct\cf0  objc_class \{\
    Class isa;\
\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #if !__OBJC2__\
\pard\tx334\pardeftab334\pardirnatural
\cf0     Class super_class                                        \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 const\cf0  \cf2 char\cf0  *name                                         \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 long\cf0  version                                             \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 long\cf0  info                                                \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 long\cf0  instance_size                                       \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 struct\cf0  objc_ivar_list *ivars                             \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 struct\cf0  objc_method_list **methodLists                    \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 struct\cf0  objc_cache *cache                                 \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 struct\cf0  objc_protocol_list *protocols                     \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #endif\
\pard\tx334\pardeftab334\pardirnatural
\cf0 \
\} \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\pard\tx334\pardeftab334\pardirnatural
\cf4 /* Use `Class` instead of `struct objc_class *` */\
\
\
\pard\tx334\pardeftab334\pardirnatural
\cf2 @interface\cf0  Protocol : \cf5 NSObject\cf0 \
\cf2 @end\
\
\pard\tx334\pardeftab334\pardirnatural
\cf4 /// An opaque type that represents a method in a class definition.\cf0 \
\pard\tx334\pardeftab334\pardirnatural
\cf2 typedef\cf0  \cf2 struct\cf0  \cf5 objc_method\cf0  *Method;\
\
\pard\tx334\pardeftab334\pardirnatural
\cf4 /// An opaque type that represents an instance variable.\cf0 \
\pard\tx334\pardeftab334\pardirnatural
\cf2 typedef\cf0  \cf2 struct\cf0  \cf5 objc_ivar\cf0  *Ivar;\
\
\pard\tx334\pardeftab334\pardirnatural
\cf4 /// An opaque type that represents a category.\cf0 \
\pard\tx334\pardeftab334\pardirnatural
\cf2 typedef\cf0  \cf2 struct\cf0  \cf5 objc_category\cf0  *Category;\
\
\pard\tx334\pardeftab334\pardirnatural
\cf4 /// An opaque type that represents an Objective-C declared property.\cf0 \
\pard\tx334\pardeftab334\pardirnatural
\cf2 typedef\cf0  \cf2 struct\cf0  \cf5 objc_property\cf0  *objc_property_t;\
\
\
\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #define _C_ID       \cf6 '@'\cf3 \
#define _C_CLASS    \cf6 '#'\cf3 \
#define _C_SEL      \cf6 ':'\cf3 \
#define _C_CHR      \cf6 'c'\cf3 \
#define _C_UCHR     \cf6 'C'\cf3 \
#define _C_SHT      \cf6 's'\cf3 \
#define _C_USHT     \cf6 'S'\cf3 \
#define _C_INT      \cf6 'i'\cf3 \
#define _C_UINT     \cf6 'I'\cf3 \
#define _C_LNG      \cf6 'l'\cf3 \
#define _C_ULNG     \cf6 'L'\cf3 \
#define _C_LNG_LNG  \cf6 'q'\cf3 \
#define _C_ULNG_LNG \cf6 'Q'\cf3 \
#define _C_FLT      \cf6 'f'\cf3 \
#define _C_DBL      \cf6 'd'\cf3 \
#define _C_BFLD     \cf6 'b'\cf3 \
#define _C_BOOL     \cf6 'B'\cf3 \
#define _C_VOID     \cf6 'v'\cf3 \
#define _C_UNDEF    \cf6 '?'\cf3 \
#define _C_PTR      \cf6 '^'\cf3 \
#define _C_CHARPTR  \cf6 '*'\cf3 \
#define _C_ATOM     \cf6 '%'\cf3 \
#define _C_ARY_B    \cf6 '['\cf3 \
#define _C_ARY_E    \cf6 ']'\cf3 \
#define _C_UNION_B  \cf6 '('\cf3 \
#define _C_UNION_E  \cf6 ')'\cf3 \
#define _C_STRUCT_B \cf6 '\{'\cf3 \
#define _C_STRUCT_E \cf6 '\}'\cf3 \
#define _C_VECTOR   \cf6 '!'\cf3 \
#define _C_CONST    \cf6 'r'\cf3 \
\pard\tx334\pardeftab334\pardirnatural
\cf0 \
\
\pard\tx334\pardeftab334\pardirnatural
\cf4 /* Obsolete types */\cf0 \
\
\cf3 #if !__OBJC2__\
\pard\tx334\pardeftab334\pardirnatural
\cf0 \
\pard\tx334\pardeftab334\pardirnatural
\cf3 #define CLS_GETINFO(cls,infomask)        ((cls)->info & (infomask))\
#define CLS_SETINFO(cls,infomask)        ((cls)->info |= (infomask))\
\pard\tx334\pardeftab334\pardirnatural
\cf0 \
\pard\tx334\pardeftab334\pardirnatural
\cf4 // class is not a metaclass\cf0 \
\cf3 #define CLS_CLASS               \cf6 0x1\cf3 \
\cf4 // class is a metaclass\cf0 \
\cf3 #define CLS_META                \cf6 0x2\cf3 \
\cf4 // class's +initialize method has completed\cf0 \
\cf3 #define CLS_INITIALIZED         \cf6 0x4\cf3 \
\cf4 // class is posing\cf0 \
\cf3 #define CLS_POSING              \cf6 0x8\cf3 \
\cf4 // unused\cf0 \
\cf3 #define CLS_MAPPED              \cf6 0x10\cf3 \
\cf4 // class and subclasses need cache flush during image loading\cf0 \
\cf3 #define CLS_FLUSH_CACHE         \cf6 0x20\cf3 \
\cf4 // method cache should grow when full\cf0 \
\cf3 #define CLS_GROW_CACHE          \cf6 0x40\cf3 \
\cf4 // unused\cf0 \
\cf3 #define CLS_NEED_BIND           \cf6 0x80\cf3 \
\cf4 // methodLists is array of method lists\cf0 \
\cf3 #define CLS_METHOD_ARRAY        \cf6 0x100\cf3 \
\cf4 // the JavaBridge constructs classes with these markers\cf0 \
\cf3 #define CLS_JAVA_HYBRID         \cf6 0x200\cf3 \
#define CLS_JAVA_CLASS          \cf6 0x400\cf3 \
\cf4 // thread-safe +initialize\cf0 \
\cf3 #define CLS_INITIALIZING        \cf6 0x800\cf3 \
\cf4 // bundle unloading\cf0 \
\cf3 #define CLS_FROM_BUNDLE         \cf6 0x1000\cf3 \
\cf4 // C++ ivar support\cf0 \
\cf3 #define CLS_HAS_CXX_STRUCTORS   \cf6 0x2000\cf3 \
\cf4 // Lazy method list arrays\cf0 \
\cf3 #define CLS_NO_METHOD_ARRAY     \cf6 0x4000\cf3 \
\cf4 // +load implementation\cf0 \
\cf3 #define CLS_HAS_LOAD_METHOD     \cf6 0x8000\cf3 \
\cf4 // objc_allocateClassPair API\cf0 \
\cf3 #define CLS_CONSTRUCTING        \cf6 0x10000\cf3 \
\cf4 // class compiled with bigger class structure\cf0 \
\cf3 #define CLS_EXT                 \cf6 0x20000\cf3 \
\pard\tx334\pardeftab334\pardirnatural
\cf0 \
\
\cf2 struct\cf0  objc_method_description_list \{\
        \cf2 int\cf0  count;\
        \cf2 struct\cf0  \cf7 objc_method_description\cf0  list[\cf6 1\cf0 ];\
\};\
\
\
\cf2 struct\cf0  objc_protocol_list \{\
    \cf2 struct\cf0  \cf7 objc_protocol_list\cf0  *next;\
    \cf2 long\cf0  count;\
    Protocol *list[\cf6 1\cf0 ];\
\};\
\
\
\cf2 struct\cf0  objc_category \{\
    \cf2 char\cf0  *category_name                                      \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 char\cf0  *class_name                                         \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 struct\cf0  \cf7 objc_method_list\cf0  *instance_methods                \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 struct\cf0  \cf7 objc_method_list\cf0  *class_methods                   \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 struct\cf0  \cf7 objc_protocol_list\cf0  *protocols                     \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\}                                                            \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\
\cf2 struct\cf0  objc_ivar \{\
    \cf2 char\cf0  *ivar_name                                          \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 char\cf0  *ivar_type                                          \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 int\cf0  ivar_offset                                          \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #ifdef __LP64__\
\pard\tx334\pardeftab334\pardirnatural
\cf0     \cf2 int\cf0  space                                                OBJC2_UNAVAILABLE;\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #endif\
\pard\tx334\pardeftab334\pardirnatural
\cf0 \}                                                            \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\cf2 struct\cf0  objc_ivar_list \{\
    \cf2 int\cf0  ivar_count                                           \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #ifdef __LP64__\
\pard\tx334\pardeftab334\pardirnatural
\cf0     \cf2 int\cf0  space                                                OBJC2_UNAVAILABLE;\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #endif\
\pard\tx334\pardeftab334\pardirnatural
\cf0     \cf4 /* variable length structure */\cf0 \
    \cf2 struct\cf0  \cf7 objc_ivar\cf0  ivar_list[\cf6 1\cf0 ]                            \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\}                                                            \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\
\cf2 struct\cf0  objc_method \{\
    \cf2 SEL\cf0  method_name                                          \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 char\cf0  *method_types                                       \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 IMP\cf0  method_imp                                           \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\}                                                            \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\cf2 struct\cf0  objc_method_list \{\
    \cf2 struct\cf0  \cf7 objc_method_list\cf0  *obsolete                        \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
    \cf2 int\cf0  method_count                                         \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #ifdef __LP64__\
\pard\tx334\pardeftab334\pardirnatural
\cf0     \cf2 int\cf0  space                                                OBJC2_UNAVAILABLE;\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #endif\
\pard\tx334\pardeftab334\pardirnatural
\cf0     \cf4 /* variable length structure */\cf0 \
    \cf2 struct\cf0  \cf7 objc_method\cf0  method_list[\cf6 1\cf0 ]                        \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\}                                                            \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\
\cf2 typedef\cf0  \cf2 struct\cf0  \cf7 objc_symtab\cf0  *Symtab                           \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\cf2 struct\cf0  objc_symtab \{\
    \cf2 unsigned\cf0  \cf2 long\cf0  sel_ref_cnt                                \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 SEL\cf0  *refs                                                \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 unsigned\cf0  \cf2 short\cf0  cls_def_cnt                               \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 unsigned\cf0  \cf2 short\cf0  cat_def_cnt                               \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 void\cf0  *defs[\cf6 1\cf0 ] \cf4 /* variable size */\cf0                         \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\}                                                            \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\
\cf2 typedef\cf0  \cf2 struct\cf0  \cf7 objc_cache\cf0  *Cache                             \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #define CACHE_BUCKET_NAME(B)  ((B)->method_name)\
#define CACHE_BUCKET_IMP(B)   ((B)->method_imp)\
#define CACHE_BUCKET_VALID(B) (B)\
#ifndef __LP64__\
#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)>>\cf6 2\cf3 ) & (mask))\
#else\
#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)>>\cf6 3\cf3 )) & (mask))\
#endif\
\pard\tx334\pardeftab334\pardirnatural
\cf2 struct\cf0  objc_cache \{\
    \cf2 unsigned\cf0  \cf2 int\cf0  mask \cf4 /* total = mask + 1 */\cf0                  \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 unsigned\cf0  \cf2 int\cf0  occupied                                    \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf7 Method\cf0  buckets[\cf6 1\cf0 ]                                        \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\};\
\
\
\cf2 typedef\cf0  \cf2 struct\cf0  \cf7 objc_module\cf0  *Module                           \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\cf2 struct\cf0  objc_module \{\
    \cf2 unsigned\cf0  \cf2 long\cf0  version                                    \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 unsigned\cf0  \cf2 long\cf0  size                                       \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf2 const\cf0  \cf2 char\cf0  *name                                         \cf3 OBJC2_UNAVAILABLE\cf0 ;\
    \cf7 Symtab\cf0  symtab                                            \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\}                                                            \cf3 OBJC2_UNAVAILABLE\cf0 ;\
\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #else\
\pard\tx334\pardeftab334\pardirnatural
\cf0 \
\cf2 struct\cf0  objc_method_list;\
\
\pard\tx334\pardeftab334\pardirnatural
\cf3 #endif\
\pard\tx334\pardeftab334\pardirnatural
\cf0 \
\cf2 \
}